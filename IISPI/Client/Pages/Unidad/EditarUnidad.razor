@page "/unidad/editar/{id:int}"
@inject NavigationManager NavigationManager
@inject UnidadesService Service
@inject IJSRuntime JS

<div class="d-flex justify-content-between mb-3">
    <h3><b>Editar Unidad</b></h3>
    <div>
        <button @onclick="@Volver" class="btn btn-sm btn-secondary">
            <i class="oi oi-arrow-circle-left"></i> Volver atrás
        </button>
    </div>
</div>

<div class="card m-1">
    <div class="card-body">
        <FormUnidad unidad="@unidad" TextBotonSubmit="Editar unidad" OnValidSubmit="@EditUnidad"/>
    </div>
</div>

@code {
    public UnidadesDTO unidad = new UnidadesDTO();
    public Unidad unidadEntity = new Unidad();

    [Parameter] public int id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        unidadEntity = await Service.Get(id);
        unidad = MapeaDTO(unidadEntity);
    }

    UnidadesDTO MapeaDTO(Unidad unidad)
    {
        UnidadesDTO unidadDTO = new();
        unidadDTO.CodUnidad = unidad.CodUnidad;
        unidadDTO.DescUnidad = unidad.DescUnidad;

        return unidadDTO;
    }

    async Task EditUnidad()
    {
        var respuesta = await Service.Put(unidad);

        if (respuesta.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/unidades");
            await JS.InvokeVoidAsync("simple", "¡Éxito!", $"Unidad actualizada correctamente!", "success");
        }
        else
            await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo editar unidad.", "error");
    }

    private void Volver()
    {
        NavigationManager.NavigateTo("/unidades");
    }
}