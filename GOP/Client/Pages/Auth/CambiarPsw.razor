@page "/cambiarcontraseña"
@using GOP.Client.Services
@using GOP.Shared.DTOs.Identity
@inject NavigationManager NavigationManager
@inject UserService Service
@inject IJSRuntime JS

<div class="d-flex justify-content-between mb-3">
    <div>
        <h4><b>Cambiar contraseña</b></h4>
    </div>
    <button @onclick="@Volver" class="btn btn-sm btn-secondary">
        <i class="oi oi-arrow-circle-left"></i> Atrás
    </button>
</div>

<EditForm Model="@credenciales" OnValidSubmit="CambioPsw">
    <div class="form-group m-2" hidden>
        <label>Correo</label>
        <InputText type="email" @bind-Value="credenciales.Email" class="form-control" />
        <ValidationMessage For="@(() => credenciales.Email)" />
    </div>

    <div class="form-group m-2">
        <label>Nueva Contraseña</label>
        <InputText @bind-Value="credenciales.Psw" type="password" class="form-control" placeholder="Ingrese Contraseña" />
        <ValidationMessage For="@(() => credenciales.Psw)" />
    </div>

    <div class="form-group m-2">
        <label>Repita Nueva Contraseña</label>
        <InputText @bind-Value="contraseñaRepetida" @onfocusout="@ValidaContraseñas" type="password" class="form-control" placeholder="Repita Contraseña" />
        <ValidationMessage For="@(() => contraseñaRepetida)" />
    </div>

    <div class="d-flex justify-content-end m-2">
        <button type="submit" class="btn btn-block btn-success">
            Cambiar contraseña
        </button>
    </div>

</EditForm>

@code {

    public CredencialUserDTO credenciales { get; set; } = new();

    public string contraseñaRepetida { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await Service.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            credenciales.Email = authState.User.Claims.FirstOrDefault(x => x.Type == "Email").Value;
        }
    }

    void ValidaContraseñas()
    {
        if (credenciales.Psw != contraseñaRepetida)
        {
            JS.InvokeVoidAsync("simple", "Error", $"Error. Las contraseñas no coinciden.", "error");
        }
    }


    async Task CambioPsw()
    {
        if (await Service.CambioPsw(credenciales))
        {
            await JS.InvokeVoidAsync("simple", "Exito!", $"La contraseña se cambió correctamente.", "success");
            NavigationManager.NavigateTo($"/logout");
        }
        else
        {
            await JS.InvokeVoidAsync("simple", "Error", $"Error. No se pudo cambiar la contraseña.", "error");
        }
    }

    private void Volver()
    {
        NavigationManager.NavigateTo($"/eventos");
    }

}
