@page "/certificadoitemcontroldocs/{id:int}"
@inject NavigationManager NavigationManager
@inject CertificadoItemControlDocsService Service
@inject CertificadoItemControlsService CertificadoItemControlService
@inject IJSRuntime JS

<div class="d-flex justify-content-between mb-1" id="header">
    @if (cItemControl != null)
    {
        <h5> Documentos del control: @cItemControl.DescControl</h5>
    }
    <div>
        <button @onclick="@Volver" class="btn btn-sm btn-secondary">
            <i class="oi oi-arrow-circle-left"></i> Atrás
        </button>
        <a href="certificadoitemcontroldocs/crear/@cItemControl.Id" class="btn btn-sm btn-success">
            <i class="oi oi-plus"></i>
        </a>
    </div>
</div>


@if (cItemControlDocs == null)
{
    <div class="vh-100 row m-0 text-center align-items-center justify-content-center">
        <div class="spinner-grow" role="status"></div>
    </div>
}
else if (cItemControlDocs.Count() == 0)
{
    <p>No se encontraron documentos.</p>
}
else
{
    <table class="table table-responsive table-hover">
        <thead class="table-dark">
            <tr>
                <th>Descripcion</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cItemControlDocs)
            {
                <tr>
                    <td>@item.Descripcion</td>
                    <td>
                        <a class="btn btn-sm btn-outline-warning m-1" href="certificadoitemcontroldocs/editar/@cItemControl.Id" data-toggle="tooltip" data-placement="bottom" title="Editar"><i class="oi oi-pencil"></i></a>
                        <button @onclick="@(() => Borrar(item.Id))" class="btn btn-sm btn-outline-danger m-1" data-toggle="tooltip" data-placement="bottom" title="Borrar">
                            <i class="oi oi-trash"></i>
                        </button>
                        <button @onclick="@(() => Ver(item.Id))" class="btn btn-sm btn-outline-info m-1" data-toggle="tooltip" data-placement="bottom" title="Descargar">
                            <i class="oi oi-eye"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="d-flex justify-content-between mb-1" id="footer">
    <nav aria-label="Page navigation example">
        <ul class="pagination pagination-sm">
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(false)">Anterior</button></li>
            <li class="page-item"><button class="page-link">@pagina</button></li>
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(true)">Siguiente</button></li>
        </ul>
    </nav>
    <div>
        @registros registros totales
    </div>
</div>


@code {
    public CertificadoItemControlDTO cItemControl = new CertificadoItemControlDTO();

    [Parameter] public int id { get; set; }

    public IEnumerable<CertificadoItemControlDocDTO> cItemControlDocs { get; set; }
    public IEnumerable<CertificadoItemControlDocDTO> cItemControlDocsPag { get; set; }

    public int pagina { get; set; } = 1;

    public int registros { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("levantaTooltips");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetControles();
        await Paginar(false);
    }

    private async Task Borrar(int id)
    {
        var item = await Service.Get(id);

        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Eliminar",
            $"¿Desea eliminar documento {item.Descripcion}?", "warning");
        if (confirmacion)
        {
            var respuesta = await Service.Baja(id);

            if (respuesta.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("simple", "¡Éxito!", "Documento eliminado", "success");
                await GetControles();
                await Paginar(false);
            }
            else
            {
                await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo eliminar documento", "error");
            }
        }
    }


    private async Task GetControles()
    {
        cItemControl = await CertificadoItemControlService.Get(id);

        cItemControlDocs = await Service.GetFull(cItemControl.Id);
        cItemControlDocsPag = cItemControlDocs;
    }

    async Task Paginar(bool next)
    {
        cItemControlDocs = cItemControlDocsPag;
        int cantidadPorPagina = 10;
        registros = cItemControlDocs.Count();
        decimal total;

        if (registros < cantidadPorPagina)
            total = pagina;
        else
        {
            if (registros % cantidadPorPagina == 0)
                total = registros / cantidadPorPagina;
            else
                total = (registros / cantidadPorPagina) + 1;
        }

        if (!next && pagina > 1) pagina--;

        if (next && pagina < total) pagina++;

        cItemControlDocs = cItemControlDocs.Skip((pagina - 1) * cantidadPorPagina).Take(cantidadPorPagina);
    }

    private void Volver()
    {
        NavigationManager.NavigateTo($"/certificadoitemcontroles/{cItemControl.CertificadoItemId}");
    }


    private async Task Ver(int id)
    {
        try
        {
            var documento = await Service.Get(id);

            await JS.InvokeVoidAsync("ver", documento.PathDoc);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("simple", "Error", $"No se pudo encontrar el archivo especificado. {ex}", "error");
        }
    }
}