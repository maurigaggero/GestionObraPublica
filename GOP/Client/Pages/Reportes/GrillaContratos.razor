@using GOP.Client.Pages.Helpers
@inject NavigationManager NavigationManager
@inject ContratoService Service
@inject UserService UserService
@inject IJSRuntime JS


@if (contratos == null)
{
  <LoadingSpinner></LoadingSpinner>
}
else if (contratos.Count() == 0)
{
    <p>No se encontraron contratos.</p>
}
else
{
    <table class="table table-responsive table-hover">
        <thead class="table-dark">
            <tr>
                <th>Contratos</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contrato in contratos)
            {
                <tr>
                    <td data-toggle="tooltip" data-placement="bottom" title="@contrato.Caratula">
                        @contrato.NumExpediente - @contrato.Zona.CodigoZona - @contrato.Empresa.Nombre <br>
                        <button @onclick="@(() => ReportePorPeriodo(contrato))"
                        class="btn btn-sm btn-success m-1"
                        data-toggle="tooltip"
                        data-placement="bottom"
                        title="Generar Excel">
                            <i class="oi oi-spreadsheet"></i> Items Por Periodo
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="d-flex justify-content-between mb-1" id="footer">
    <nav aria-label="Page navigation example">
        <ul class="pagination pagination-sm">
            <li class="page-item "><button class="page-link" @onclick="() => Paginar(false)">Anterior</button></li>
            <li class="page-item"><button class="page-link">@pagina</button></li>
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(true)">Siguiente</button></li>
        </ul>
    </nav>
    <div>
        @registros registros totales
    </div>
</div>


@code {
    public IEnumerable<ContratoDTO> contratos { get; set; }
    public IEnumerable<ContratoDTO> contratosPag { get; set; }

    public int pagina { get; set; } = 1;

    public int registros { get; set; }

    AuthenticationState authState;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("levantaTooltips");
    }

    protected override async Task OnInitializedAsync()
    {
        authState = await UserService.GetAuthenticationStateAsync();

        await GetContratos();
        await Paginar(false);
    }


    private async Task GetContratos()
    {
        contratos = await Service.GetFull();
        contratosPag = contratos;
    }

    async Task Paginar(bool next)
    {
        contratos = contratosPag;
        int cantidadPorPagina = 10;
        registros = contratos.Count();
        decimal total;

        if (registros < cantidadPorPagina)
            total = pagina;
        else
        {
            if (registros % cantidadPorPagina == 0)
                total = registros / cantidadPorPagina;
            else
                total = (registros / cantidadPorPagina) + 1;
        }

        if (!next && pagina > 1) pagina--;

        if (next && pagina < total) pagina++;

        contratos = contratos.Skip((pagina - 1) * cantidadPorPagina).Take(cantidadPorPagina);
    }

    public int IsDownloadStarted { get; set; } = 0;


    protected async Task ReportePorPeriodo(ContratoDTO contrato)
    {
        IsDownloadStarted = 1;
        StateHasChanged();

        var response = await Service.GenerarExcelPorPeriodo(contrato.Id);
        response.EnsureSuccessStatusCode();

        var fileBytes = await response.Content.ReadAsByteArrayAsync();

        //Contrato_ZonaCod_Fecha
        var filename = "Items Medidos De Contrato_"
                       + contrato.Caratula.Substring(0, 2) + "_"
                       + DateTime.Now.ToString("yyyyMMdd HHmm") + ".xlsx";
        await JS.InvokeAsync<object>("saveAsFile", filename, Convert.ToBase64String(fileBytes));

        IsDownloadStarted = 2;
    }

}