@page "/personas"
@using GOP.Client.Pages.Helpers
@inject NavigationManager NavigationManager
@inject PersonaService Service
@inject UserService UserService
@inject IJSRuntime JS
@attribute [Authorize]

<div class="d-flex justify-content-between mb-1" id="header">
    <h5>Personas</h5>
    <div class="d-flex justify-content-end mb-1" id="header">
        <a href="persona/crear" class="btn btn-sm btn-success">
            <i class="oi oi-plus"></i>
        </a>
    </div>
</div>


@if (personas == null)
{
  <LoadingSpinner></LoadingSpinner>
}
else if (personas.Count() == 0)
{
    <p>No se encontraron personas.</p>
}
else
{
    <table class="table table-responsive table-hover">
        <thead class="table-dark">
            <tr>
                <th>Nombre (Rol) / Email</th>
                <th>DNI / Tel.</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var persona in personas)
            {
                <tr>
                    <td>
                        <b>@persona.Apellido, @persona.Nombre (@persona.Rol)</b>
                        <br>
                        @persona.Email
                        <br>
                        <button class="btn btn-sm btn-outline-dark m-1"
                            @onclick="@(() => NuevoUsuario(persona.Id, @persona.Email))"
                            data-toggle="tooltip" data-placement="bottom" title="Administrar Usuario">
                            <i class="oi oi-person"></i>
                        </button>
                        <a class="btn btn-sm btn-outline-warning m-1"
                            href="persona/editar/@persona.Id"
                            data-toggle="tooltip" data-placement="bottom" title="Editar Persona">
                            <i class="oi oi-pencil"></i>
                        </a>
                        <button class="btn btn-sm btn-outline-danger m-1"
                            @onclick="@(() => BorrarPersona(@persona.Id))"
                            data-toggle="tooltip" data-placement="bottom" title="Borrar">
                            <i class="oi oi-trash"></i>
                        </button>
                    </td>
                    <td>
                        @persona.DNI
                        <br>
                        @persona.Telefono
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="d-flex justify-content-between mb-1" id="footer">
    <nav aria-label="Page navigation example">
        <ul class="pagination pagination-sm">
            <li class="page-item "><button class="page-link" @onclick="() => Paginar(false)">Anterior</button></li>
            <li class="page-item"><button class="page-link">@pagina</button></li>
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(true)">Siguiente</button></li>
        </ul>
    </nav>
    <div>
        @registros registros totales
    </div>
</div>


@code {
    public IEnumerable<PersonaRolesDTO> personas { get; set; }
    public IEnumerable<PersonaRolesDTO> personasPag { get; set; }

    public int pagina { get; set; } = 1;

    public string email = string.Empty;

    public int registros { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("levantaTooltips");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetPersonas();
        await Paginar(false);
    }

    private async Task BorrarPersona(int id)
    {
        var persona = await Service.Get(id);

        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Eliminar",
            $"¿Desea eliminar persona {persona.Nombre} {persona.Apellido}?", "warning");
        if (confirmacion)
        {
            var respuesta = await Service.Baja(id);

            if (respuesta.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("simple", "¡Éxito!", "Persona eliminada", "success");
                await GetPersonas();
                await Paginar(false);
            }
            else
            {
                await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo eliminar persona", "error");
            }
        }
    }

    private async Task GetPersonas()
    {
        personas = await UserService.GetPersonasRoles();
        personasPag = personas;
    }

    async Task NuevoUsuario(int id, string email)
    {
        bool existe = await UserService.ExisteUsuario(email);

        if (!existe)
        {
            NavigationManager.NavigateTo($"/altausuarios/{id}");
        }
        else
        {
            NavigationManager.NavigateTo($"/cambiorol/{id}");
        }
    }


    async Task Paginar(bool next)
    {
        personas = personasPag;
        int cantidadPorPagina = 10;
        registros = personas.Count();
        decimal total;

        if (registros < cantidadPorPagina)
            total = pagina;
        else
        {
            if (registros % cantidadPorPagina == 0)
                total = registros / cantidadPorPagina;
            else
                total = (registros / cantidadPorPagina) + 1;
        }

        if (!next && pagina > 1) pagina--;

        if (next && pagina < total) pagina++;

        personas = personas.Skip((pagina - 1) * cantidadPorPagina).Take(cantidadPorPagina);
    }
}