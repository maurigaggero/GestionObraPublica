@page "/certificadoitemscontrolparams/{id:int}"
@inject NavigationManager NavigationManager
@inject CertificadoItemControlsService CertificadoItemControlesService
@inject CertificadoItemControlParamsService Service
@inject IJSRuntime JS
@attribute [Authorize]


<div class="d-flex justify-content-between mb-1" id="header">
    @if (certificadoItemControl != null)
    {
        <h5> Control: @certificadoItemControl.DescControl </h5>
    }
    <div>
        <button @onclick="@Volver" class="btn btn-sm btn-secondary">
            <i class="oi oi-arrow-circle-left"></i>
        </button>
    </div>
</div>


@if (certificadoItemControl.Parametros == null)
{
    <div class="vh-100 row m-0 text-center align-items-center justify-content-center">
        <div class="spinner-grow" role="status"></div>
    </div>
}
else if (certificadoItemControl.Parametros.Count() == 0)
{
    <p>No se encontraron parametros.</p>
}
else
{
    <table class="table table-responsive table-hover">
        <thead class="table-dark">
            <tr>
                <th>Parametros</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var controlParam in controlesParams)
            {
                <tr>
                    <td>@controlParam.Parametro -
                        @controlParam.Descripción - @controlParam.ValorMedido
                        @if (controlParam.Unidad != null)
                        {
                            @($" {@controlParam.Unidad.CodUnidad}")
                        }
                        <br>
                        <b>@($"{controlParam.Estado}")</b>
                        @if (@controlParam.Obs != null && @controlParam.Obs != "")
                        {
                            <br>
                            @controlParam.Obs
                        }
                        <br>
                        <a class="btn btn-sm btn-outline-warning m-1" 
                           href="certificadoitemcontrolparams/editar/@controlParam.Id" 
                           data-toggle="tooltip" data-placement="bottom" title="Editar">
                           <i class="oi oi-pencil"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="d-flex justify-content-between mb-1" id="footer">
    <nav aria-label="Page navigation example">
        <ul class="pagination pagination-sm">
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(false)">Anterior</button></li>
            <li class="page-item"><button class="page-link">@pagina</button></li>
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(true)">Siguiente</button></li>
        </ul>
    </nav>
    <div>
        @registros registros totales
    </div>
</div>


@code {
    public CertificadoItemControlDTO certificadoItemControl = new CertificadoItemControlDTO();

    [Parameter] public int id { get; set; }

    public IEnumerable<CertificadoItemControlParamDTO> controlesParams { get; set; }
    public IEnumerable<CertificadoItemControlParamDTO> controlesParamsPag { get; set; }

    public int pagina { get; set; } = 1;

    public int registros { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("levantaTooltips");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetItemControl();
        await Paginar(false);
    }

    private async Task GetItemControl()
    {
        certificadoItemControl = await CertificadoItemControlesService.Get(id);

        controlesParams = certificadoItemControl.Parametros;
        controlesParamsPag = controlesParams;
    }

    async Task Paginar(bool next)
    {
        controlesParams = controlesParamsPag;
        int cantidadPorPagina = 10;
        registros = controlesParams.Count();
        decimal total;

        if (registros < cantidadPorPagina)
            total = pagina;
        else
        {
            if (registros % cantidadPorPagina == 0)
                total = registros / cantidadPorPagina;
            else
                total = (registros / cantidadPorPagina) + 1;
        }

        if (!next && pagina > 1) pagina--;

        if (next && pagina < total) pagina++;

        controlesParams = controlesParams.Skip((pagina - 1) * cantidadPorPagina).Take(cantidadPorPagina);
    }

    private void Volver()
    {
        NavigationManager.NavigateTo($"/certificadoitemcontroles/{certificadoItemControl.CertificadoItemId}");
    }
}