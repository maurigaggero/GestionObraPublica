@page "/contratoitemscontroldocs/{id:int}"
@inject NavigationManager NavigationManager
@inject ContratoItemControlesService ContratoItemControlesService
@inject ContratoItemControlesDocsService Service
@inject IJSRuntime JS

<div class="d-flex justify-content-between mb-1" id="header">
    @if (contratoItemControl != null)
    {
        <h5> Documentos del control: @contratoItemControl.DescControl </h5>
    }
    <div>
        <button @onclick="@Volver" class="btn btn-sm btn-secondary">
            <i class="oi oi-arrow-circle-left"></i> Atrás
        </button>
    </div>
</div>


@if (contratoItemControl.Documentos == null)
{
    <div class="vh-100 row m-0 text-center align-items-center justify-content-center">
        <div class="spinner-grow" role="status"></div>
    </div>
}
else if (contratoItemControl.Documentos.Count() == 0)
{
    <p>No se encontraron documentos.</p>
}
else
{
    <table class="table table-responsive table-hover">
        <thead class="table-dark">
            <tr>
                <th>Descripcion</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var control in controlDocs)
            {
                <tr>
                    <td>@control.Descripcion</td>
                    <td>
                        <button @onclick="@(() => Ver(control.Id))" class="btn btn-sm btn-outline-info m-1" data-toggle="tooltip" data-placement="bottom" title="Descargar">
                            <i class="oi oi-eye"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="d-flex justify-content-between mb-1" id="footer">
    <nav aria-label="Page navigation example">
        <ul class="pagination pagination-sm">
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(false)">Anterior</button></li>
            <li class="page-item"><button class="page-link">@pagina</button></li>
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(true)">Siguiente</button></li>
        </ul>
    </nav>
    <div>
        @registros registros totales
    </div>
</div>


@code {
    public ContratoItemControlDTO contratoItemControl = new ContratoItemControlDTO();

    [Parameter] public int id { get; set; }

    public IEnumerable<ContratoItemControlDocDTO> controlDocs { get; set; }
    public IEnumerable<ContratoItemControlDocDTO> controlDocsPag { get; set; }

    public int pagina { get; set; } = 1;

    public int registros { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("levantaTooltips");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetContratoItemControl();
        await Paginar(false);
    }


    private async Task GetContratoItemControl()
    {
        contratoItemControl = await ContratoItemControlesService.Get(id);

        controlDocs = contratoItemControl.Documentos;
        controlDocsPag = controlDocs;
    }

    async Task Paginar(bool next)
    {
        controlDocs = controlDocsPag;
        int cantidadPorPagina = 10;
        registros = controlDocs.Count();
        decimal total;

        if (registros < cantidadPorPagina)
            total = pagina;
        else
        {
            if (registros % cantidadPorPagina == 0)
                total = registros / cantidadPorPagina;
            else
                total = (registros / cantidadPorPagina) + 1;
        }

        if (!next && pagina > 1) pagina--;

        if (next && pagina < total) pagina++;

        controlDocs = controlDocs.Skip((pagina - 1) * cantidadPorPagina).Take(cantidadPorPagina);
    }

    private void Volver()
    {
        NavigationManager.NavigateTo($"/contratoitemscontroles/{@contratoItemControl.ContratoItemId}");
    }


    private async Task Ver(int id)
    {
        try
        {
            var documento = await Service.Get(id);

            await JS.InvokeVoidAsync("ver", documento.PathDoc);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("simple", "Error", $"No se pudo encontrar el archivo especificado. {ex}", "error");
        }
    }
}