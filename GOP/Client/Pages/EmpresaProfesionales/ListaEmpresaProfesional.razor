@page "/empresaprofesionales/{empresaId:int}"
@using GOP.Client.Pages.Helpers
@inject NavigationManager NavigationManager
@inject EmpresaProfesionalesService Service
@inject EmpresasService EmpresaService
@inject IJSRuntime JS
@attribute [Authorize]

<div class="d-flex justify-content-between mb-1" id="header">
    @if (empresa != null)
    {
        <h5>Profesionales de la empresa: @empresa.Nombre</h5>
        <div>
            <button @onclick="@Volver" class="btn btn-sm btn-secondary">
                <i class="oi oi-arrow-circle-left"></i> Atrás
            </button>
            <a href="empresaprofesional/crear/@empresa.Id" class="btn btn-sm btn-success">
                <i class="oi oi-plus"></i>
            </a>
        </div>
    }
</div>


@if (empresaProfesionales == null)
{
  <LoadingSpinner></LoadingSpinner>
}
else if (empresaProfesionales.Count() == 0)
{
    <p>No se encontraron profesionales.</p>
}
else
{
    <table class="table table-responsive table-hover">
        <thead class="table-dark">
            <tr>
                <th>Persona</th>
                <th>Descripcion Funcion</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var empresaProfesional in empresaProfesionales)
            {
                <tr>
                    <td>@empresaProfesional.Persona.Apellido, @empresaProfesional.Persona.Nombre</td>
                    <td>@empresaProfesional.DescFuncProf</td>
                    <td>
                        <a class="btn btn-sm btn-outline-warning m-1" href="empresaprofesional/editar/@empresaProfesional.Id" data-toggle="tooltip" data-placement="bottom" title="Editar"><i class="oi oi-pencil"></i></a>
                        <button @onclick="@(() => BorrarProfesional(empresaProfesional.Id))" class="btn btn-sm btn-outline-danger m-1" data-toggle="tooltip" data-placement="bottom" title="Borrar">
                            <i class="oi oi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="d-flex justify-content-between mb-1" id="footer">
    <nav aria-label="Page navigation example">
        <ul class="pagination pagination-sm">
            <li class="page-item "><button class="page-link" @onclick="() => Paginar(false)">Anterior</button></li>
            <li class="page-item"><button class="page-link">@pagina</button></li>
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(true)">Siguiente</button></li>
        </ul>
    </nav>
    <div>
        @registros registros totales
    </div>
</div>


@code {
    public IEnumerable<EmpresaProfesionalDTO> empresaProfesionales { get; set; }
    public IEnumerable<EmpresaProfesionalDTO> empresaProfesionalesPag { get; set; }

    public EmpresaDTO empresa { get; set; }

    [Parameter] public int empresaId { get; set; }

    public int pagina { get; set; } = 1;

    public int registros { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("levantaTooltips");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetEmpresasProfesionales();
        await Paginar(false);
    }

    private async Task BorrarProfesional(int id)
    {
        var empresaProfesional = await Service.Get(id);

        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Eliminar",
            $"¿Desea eliminar profesional {empresaProfesional.Persona.Nombre} {empresaProfesional.Persona.Apellido}?", "warning");
        if (confirmacion)
        {
            var respuesta = await Service.Baja(id);

            if (respuesta.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("simple", "¡Éxito!", "Profesional eliminado", "success");
                await GetEmpresasProfesionales();
                await Paginar(false);
            }
            else
            {
                await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo eliminar profesional", "error");
            }
        }
    }

    private async Task GetEmpresasProfesionales()
    {
        empresa = await EmpresaService.Get(empresaId);

        empresaProfesionales = empresa.Profesionales;
        empresaProfesionalesPag = empresaProfesionales;
    }

    async Task Paginar(bool next)
    {
        empresaProfesionales = empresaProfesionalesPag;
        int cantidadPorPagina = 10;
        registros = empresaProfesionales.Count();
        decimal total;

        if (registros < cantidadPorPagina)
            total = pagina;
        else
        {
            if (registros % cantidadPorPagina == 0)
                total = registros / cantidadPorPagina;
            else
                total = (registros / cantidadPorPagina) + 1;
        }

        if (!next && pagina > 1) pagina--;

        if (next && pagina < total) pagina++;

        empresaProfesionales = empresaProfesionales.Skip((pagina - 1) * cantidadPorPagina).Take(cantidadPorPagina);
    }

    private void Volver()
    {
        NavigationManager.NavigateTo($"/empresas");
    }
}